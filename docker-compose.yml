---
version: '3.8'

x-defaults: &defaults
  restart: always
  networks:
    - traefik
  environment: &environment
    TZ: ${TZ}
    PUID: ${PUID}
    PGID: ${PGID}

services:
  traefik:
    restart: always
    image: traefik:rocamadour
    container_name: traefik
    networks:
      - traefik
    command:
      --ping
      --api.insecure=true
      --api.dashboard=true
      --providers.docker
      --providers.docker.endpoint=unix:///var/run/docker.sock
      --providers.docker.exposedbydefault=false
      --providers.docker.network=docker-server_traefik
      --entrypoints.web.address=:80
      --entrypoints.websecure.address=:443
      --log.level=DEBUG
      --log.filePath=/logs/traefik.log
      --log.format=json
      --certificatesresolvers.cloudflare.acme.email=aurelien.arino@gmail.com
      --certificatesresolvers.cloudflare.acme.storage=/letsencrypt/acme.json
      --certificatesresolvers.cloudflare.acme.keyType=RSA4096
      --certificatesresolvers.cloudflare.acme.dnsChallenge=true
      --certificatesresolvers.cloudflare.acme.dnsChallenge.provider=cloudflare
      --certificatesresolvers.cloudflare.acme.dnsChallenge.resolvers=1.1.1.1:53,8.8.8.8:53
    ports:
      - 80:80
      - 443:443
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - traefik-certs:/letsencrypt
      - traefik-logs:/logs
    environment:
      <<: *environment
      CLOUDFLARE_DNS_API_TOKEN: ${CF_DNS_API_TOKEN}
    healthcheck:
      test: ["CMD", "traefik", "healthcheck", "--ping"]
      interval: 5s
      timeout: 5s
      retries: 6
    labels:
      traefik.enable: true
      traefik.http.middlewares.https-redirect.redirectscheme.scheme: https
      traefik.http.middlewares.basic-auth.basicauth.users: ${BASIC_AUTH}
      traefik.http.routers.http-catchall.middlewares: https-redirect
      traefik.http.routers.http-catchall.rule: HostRegexp(`{subdomain:.+}.${APEX}`)
      traefik.http.routers.http-catchall.entrypoints: web
      traefik.http.routers.traefik.entrypoints: websecure
      traefik.http.routers.traefik.middlewares: basic-auth
      traefik.http.routers.traefik.rule: Host(`traefik.${APEX}`)
      traefik.http.routers.traefik.tls: true
      traefik.http.routers.traefik.tls.certresolver: cloudflare
      traefik.http.services.traefik.loadbalancer.server.port: 8080

  certdump:
    image: ldez/traefik-certs-dumper
    restart: always
    container_name: certdump
    privileged: true
    command: 'file --watch --domain-subdir=true --version v2'
    volumes:
      - /var/data/docker-host/traefik/certs/acme.json:/acme.json:ro
      - traefik-dump:/dump
    healthcheck:
      disable: true

  portainer:
    <<: *defaults
    image: portainer/portainer
    container_name: portainer
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer-data:/data
    healthcheck:
      test: ["CMD", "/docker", "container", "top", "portainer"]
      interval: 5s
      timeout: 5s
      retries: 6
    labels:
      traefik.enable: true
      traefik.http.routers.portainer.entrypoints: websecure
      traefik.http.routers.portainer.rule: Host(`portainer.${APEX}`)
      traefik.http.routers.portainer.tls: true
      traefik.http.routers.portainer.tls.certresolver: cloudflare
      traefik.http.services.portainer.loadbalancer.server.port: 9000
  
  personal-site-to-netlify:
    <<: *defaults
    build:
      context: aurelien.arino.io
    container_name: aurelien.arino.io-reverse-proxy
    healthcheck:
      test: ["CMD", "service", "nginx", "status"]
      interval: 5s
      timeout: 5s
      retries: 6
    labels:
      traefik.enable: true
      traefik.http.routers.aurelien-arino-io.entrypoints: websecure
      traefik.http.routers.aurelien-arino-io.rule: Host(`aurelien.${APEX}`)
      traefik.http.routers.aurelien-arino-io.tls: true
      traefik.http.routers.aurelien-arino-io.tls.certresolver: cloudflare
      traefik.http.services.aurelien-arino-io.loadbalancer.server.port: 80

  wireguard:
    <<: *defaults
    image: lscr.io/linuxserver/wireguard
    container_name: wireguard
    networks:
      wireguard:
        ipv4_address: 172.24.0.2
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    environment:
      <<: *environment
      SERVERURL: wireguard.${APEX}
      PEERS: minimacarino,ipad,iphone,windows
      PEERDNS: 172.24.0.3
    volumes:
      - wireguard-data:/config
      - /lib/modules:/lib/modules
    ports:
      - 51820:51820/udp
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1
    healthcheck:
      disable: true

  pihole:
    <<: *defaults
    image: pihole/pihole
    container_name: pihole
    depends_on:
      - wireguard
    networks:
      traefik:
        aliases:
          - traefik
      wireguard:
        ipv4_address: 172.24.0.3
    environment:
      <<: *environment
      DNS_MASQ_LISTENING: single
    volumes:
      - pihole-data:/etc/pihole
    labels:
      traefik.enable: true
      traefik.http.middlewares.pihole-redirect.redirectregex.regex: ^http[s]?://pihole\.${APEX}[/]?$$
      traefik.http.middlewares.pihole-redirect.redirectregex.replacement: https://pihole.${APEX}/admin
      traefik.http.middlewares.pihole-redirect.redirectregex.permanent: true
      traefik.http.routers.pihole.middlewares: pihole-redirect
      traefik.http.routers.pihole.entrypoints: websecure
      traefik.http.routers.pihole.rule: Host(`pihole.${APEX}`)
      traefik.http.routers.pihole.tls: true
      traefik.http.routers.pihole.tls.certresolver: cloudflare
      traefik.http.services.pihole.loadbalancer.server.port: 80
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 5s
      timeout: 5s
      retries: 6

  plexmediaserver:
    <<: *defaults
    image: plexinc/pms-docker
    container_name: plex
    ports:
      - 32400:32400/tcp
      - 3005:3005/tcp
      - 8324:8324/tcp
      - 32469:32469/tcp
      - 1900:1900/udp
      - 32410:32410/udp
      - 32412:32412/udp
      - 32413:32413/udp
      - 32414:42414/udp
    volumes:
      - plex-database:/config
      - plex-transcode:/transcode
      - plex-movies:/data/movies
      - plex-tvshows:/data/tvshows
      - plex-animes:/data/animes
      - plex-animated-movies:/data/animated-movies
    labels:
      traefik.enable: true
      traefik.http.routers.plex.entrypoints: websecure
      traefik.http.routers.plex.rule: Host(`plex.${APEX}`)
      traefik.http.routers.plex.tls: true
      traefik.http.routers.plex.tls.certresolver: cloudflare
      traefik.http.services.plex.loadbalancer.server.port: 32400

  media-browser:
    <<: *defaults
    image: filebrowser/filebrowser
    container_name: media-browser
    volumes:
      - /var/data/docker-host/filebrowser/database.db:/database.db
      - media:/srv
    user: 1000:1001
    labels:
      traefik.enable: true
      traefik.http.routers.media-browser.entrypoints: websecure
      traefik.http.routers.media-browser.rule: Host(`browser.${APEX}`)
      traefik.http.routers.media-browser.tls: true
      traefik.http.routers.media-browser.tls.certresolver: cloudflare
      traefik.http.services.media-browser.loadbalancer.server.port: 80
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 5s
      timeout: 5s
      retries: 6

  flaresolverr:
    <<: *defaults
    image: ghcr.io/flaresolverr/flaresolverr
    container_name: flaresolverr
    networks:
      - jackett
    environment:
      <<: *environment
      LOG_LEVEL: debug
      CAPTCHA_SOLVER: hcaptcha-solver

  jackett:
    <<: *defaults
    image: lscr.io/linuxserver/jackett
    container_name: jackett
    depends_on:
      - flaresolverr
    networks:
      - jackett
      - traefik
    environment:
      <<: *environment
      AUTO_UPDATE: 'false'
    volumes:
      - jackett-config:/config
      - jackett-blackhole:/downloads
    labels:
      traefik.enable: true
      traefik.http.routers.jackett.entrypoints: websecure
      traefik.http.routers.jackett.rule: Host(`jackett.${APEX}`)
      traefik.http.routers.jackett.tls: true
      traefik.http.routers.jackett.tls.certresolver: cloudflare
      traefik.http.services.jackett.loadbalancer.server.port: 9117
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9117/UI/Dashboard"]
      interval: 5s
      timeout: 5s
      retries: 6
  
  transmission:
    <<: *defaults
    image: lscr.io/linuxserver/transmission
    container_name: transmission
    volumes:
      - transmission-downloads:/downloads
      - transmission-config:/config
    ports:
      - 51413:51413
      - 51413:51413/udp
    labels:
      traefik.enable: true
      traefik.http.routers.transmission.entrypoints: websecure
      traefik.http.routers.transmission.rule: Host(`transmission.${APEX}`)
      traefik.http.routers.transmission.tls: true
      traefik.http.routers.transmission.tls.certresolver: cloudflare
      traefik.http.routers.transmission.middlewares: basic-auth
      traefik.http.services.transmission.loadbalancer.server.port: 9091
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091"]
      interval: 5s
      timeout: 5s
      retries: 6

  sonarr:
    <<: *defaults
    image: lscr.io/linuxserver/sonarr
    container_name: sonarr
    volumes:
      - sonarr-data:/config
      - plex-animes:/tv/animes
      - plex-tvshows:/tv/tvshows
      - transmission-downloads:/downloads
    labels:
      traefik.enable: true
      traefik.http.routers.sonarr.entrypoints: websecure
      traefik.http.routers.sonarr.rule: Host(`sonarr.${APEX}`)
      traefik.http.routers.sonarr.tls: true
      traefik.http.routers.sonarr.tls.certresolver: cloudflare
      traefik.http.routers.sonarr.middlewares: basic-auth
      traefik.http.services.sonarr.loadbalancer.server.port: 8989
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8989"]
      interval: 5s
      timeout: 5s
      retries: 6

  shlink-db:
    <<: *defaults
    image: postgres
    container_name: shlink-db
    environment:
      <<: *environment
      POSTGRES_DB: shlink
      POSTGRES_USER: shlink
      POSTGRES_PASSWORD: ${SHLINK_DB_PASSWD}
      PGDATA: /var/lib/postgresql/data
    volumes:
      - shlink-db:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "shlink", "-d", "shlink"]
      interval: 5s
      timeout: 5s
      retries: 6

  # d exec -t shlink shlink api-key:generate
  shlink:
    <<: *defaults
    image: shlinkio/shlink:stable
    container_name: shlink
    depends_on:
      - shlink-db
    environment:
      <<: *environment
      DEFAULT_DOMAIN: shlink.${APEX}
      IS_HTTPS_ENABLED: 'true'
      DB_DRIVER: postgres
      DB_NAME: shlink
      DB_USER: shlink
      DB_PASSWORD: ${SHLINK_DB_PASSWD}
      DB_HOST: shlink-db
      DB_PORT: 5432
    labels:
      traefik.enable: true
      traefik.http.routers.shlink.entrypoints: websecure
      traefik.http.routers.shlink.rule: Host(`shlink.${APEX}`)
      traefik.http.routers.shlink.tls: true
      traefik.http.routers.shlink.tls.certresolver: cloudflare
      traefik.http.services.shlink.loadbalancer.server.port: 8080
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/rest/health"]
      interval: 5s
      timeout: 5s
      retries: 6

  shlink-client:
    <<: *defaults
    image: shlinkio/shlink-web-client
    container_name: shlink-client
    labels:
      traefik.enable: true
      traefik.http.routers.shlink-client.entrypoints: websecure
      traefik.http.routers.shlink-client.rule: Host(`client.shlink.${APEX}`)
      traefik.http.routers.shlink-client.tls: true
      traefik.http.routers.shlink-client.tls.certresolver: cloudflare
      traefik.http.routers.shlink-client.middlewares: basic-auth
      traefik.http.services.shlink-client.loadbalancer.server.port: 80
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 5s
      timeout: 5s
      retries: 6

networks:
  traefik:
    external: false
  jackett:
    external: false
  wireguard:
    external: false
    name: wireguard
    ipam:
      driver: default
      config:
        - subnet: 172.24.0.0/16

volumes:
  traefik-certs:
    driver: local
    driver_opts: &volume_conf
      type: none
      o: bind
      device: /var/data/docker-host/traefik/certs
  traefik-logs:
    driver: local
    driver_opts:
      <<: *volume_conf
      device: /var/data/docker-host/traefik/logs
  traefik-dump:
    driver: local
    driver_opts: 
      <<: *volume_conf
      device: /var/data/docker-host/traefik/dump
  portainer-data:
    driver: local
    driver_opts: 
      <<: *volume_conf
      device: /var/data/docker-host/portainer
  media:
    driver: local
    driver_opts:
      <<: *volume_conf
      device: /var/data/docker-host/media
  plex-animes:
    driver: local
    driver_opts:
      <<: *volume_conf
      device: /var/data/docker-host/media/plex/animes
  plex-movies:
    driver: local
    driver_opts:
      <<: *volume_conf
      device: /var/data/docker-host/media/plex/movies
  plex-tvshows:
    driver: local
    driver_opts:
      <<: *volume_conf
      device: /var/data/docker-host/media/plex/tvshows
  plex-animated-movies:
    driver: local
    driver_opts:
      <<: *volume_conf
      device: /var/data/docker-host/media/plex/animated-movies
  plex-database:
    driver: local
    driver_opts:
      <<: *volume_conf
      device: /var/data/docker-host/plex/database
  plex-transcode:
    driver: local
    driver_opts:
      <<: *volume_conf
      device: /var/data/docker-host/plex/transcode
  jackett-config:
    driver: local
    driver_opts:
      <<: *volume_conf
      device: /var/data/docker-host/jackett/config
  jackett-blackhole:
    driver: local
    driver_opts:
      <<: *volume_conf
      device: /var/data/docker-host/jackett/blackhole
  transmission-config:
    driver: local
    driver_opts:
      <<: *volume_conf
      device: /var/data/docker-host/transmission
  transmission-downloads:
    driver: local
    driver_opts:
      <<: *volume_conf
      device: /var/data/docker-host/media/transmission
  wireguard-data:
    driver: local
    driver_opts:
      <<: *volume_conf
      device: /var/data/docker-host/wireguard/config
  pihole-data:
    driver: local
    driver_opts:
      <<: *volume_conf
      device: /var/data/docker-host/pihole
  shlink-db:
    driver: local
    driver_opts:
      <<: *volume_conf
      device: /var/data/docker-host/shlink/database
  sonarr-data:
    driver: local
    driver_opts:
      <<: *volume_conf
      device: /var/data/docker-host/arr/sonarr
...
