---
version: '3.8'

x-defaults: &defaults
  restart: always
  networks:
    - traefik
  environment: &environment
    TZ: ${TZ}
    PUID: ${PUID}
    PGID: ${PGID}

services:
  traefik:
    restart: always
    image: traefik:rocamadour
    container_name: traefik
    networks:
      - traefik
    command:
      --ping
      --api.insecure=true
      --api.dashboard=true
      --providers.docker
      --providers.docker.endpoint=unix:///var/run/docker.sock
      --providers.docker.exposedbydefault=false
      --providers.docker.network=docker-server_traefik
      --providers.file.filename=/dynamic_conf.toml
      --entrypoints.web.address=:80
      --entrypoints.websecure.address=:443
      --entrypoints.proton.address=:25
      --log.level=DEBUG
      --log.filePath=/logs/traefik.log
      --log.format=json
      --certificatesresolvers.cloudflare.acme.email=aurelien.arino@gmail.com
      --certificatesresolvers.cloudflare.acme.storage=/letsencrypt/acme.json
      --certificatesresolvers.cloudflare.acme.keyType=RSA4096
      --certificatesresolvers.cloudflare.acme.dnsChallenge=true
      --certificatesresolvers.cloudflare.acme.dnsChallenge.provider=cloudflare
      --certificatesresolvers.cloudflare.acme.dnsChallenge.resolvers=1.1.1.1:53,8.8.8.8:53
    ports:
      - 80:80
      - 443:443
      - 25:25/tcp
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - traefik-certs:/letsencrypt
      - traefik-logs:/logs
      - /var/data/docker-host/traefik/dynamic_conf.toml:/dynamic_conf.toml
    environment:
      <<: *environment
      CLOUDFLARE_DNS_API_TOKEN: ${CF_DNS_API_TOKEN}
    healthcheck:
      test: ["CMD", "traefik", "healthcheck", "--ping"]
      interval: 5s
      timeout: 5s
      retries: 6
    labels:
      traefik.enable: true
      traefik.http.middlewares.https-redirect.redirectscheme.scheme: https
      traefik.http.middlewares.basic-auth.basicauth.users: ${BASIC_AUTH}
      traefik.http.routers.http-catchall.middlewares: https-redirect
      traefik.http.routers.http-catchall.rule: HostRegexp(`{subdomain:.+}.${APEX}`)
      traefik.http.routers.http-catchall.entrypoints: web
      traefik.http.routers.traefik.entrypoints: websecure
      traefik.http.routers.traefik.middlewares: basic-auth
      traefik.http.routers.traefik.rule: Host(`traefik.${APEX}`)
      traefik.http.routers.traefik.tls: true
      traefik.http.routers.traefik.tls.certresolver: cloudflare
      traefik.http.services.traefik.loadbalancer.server.port: 8080

  certdump:
    image: ldez/traefik-certs-dumper
    restart: always
    container_name: certdump
    privileged: true
    command: 'file --watch --domain-subdir=true --version v2 --crt-ext=.pem --key-ext=.pem'
    volumes:
      - /var/data/docker-host/traefik/certs/acme.json:/acme.json:ro
      - traefik-dump:/dump
    healthcheck:
      disable: true

  portainer:
    <<: *defaults
    image: portainer/portainer
    container_name: portainer
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer-data:/data
    healthcheck:
      test: ["CMD", "/docker", "container", "top", "portainer"]
      interval: 5s
      timeout: 5s
      retries: 6
    labels:
      traefik.enable: true
      traefik.http.routers.portainer.entrypoints: websecure
      traefik.http.routers.portainer.rule: Host(`portainer.${APEX}`)
      traefik.http.routers.portainer.tls: true
      traefik.http.routers.portainer.tls.certresolver: cloudflare
      traefik.http.services.portainer.loadbalancer.server.port: 9000
  
  personal-site-to-netlify:
    <<: *defaults
    build:
      context: aurelien.arino.io
    container_name: aurelien.arino.io-reverse-proxy
    healthcheck:
      test: ["CMD", "service", "nginx", "status"]
      interval: 5s
      timeout: 5s
      retries: 6
    labels:
      traefik.enable: true
      traefik.http.routers.aurelien-arino-io.entrypoints: websecure
      traefik.http.routers.aurelien-arino-io.rule: Host(`aurelien.${APEX}`)
      traefik.http.routers.aurelien-arino-io.tls: true
      traefik.http.routers.aurelien-arino-io.tls.certresolver: cloudflare
      traefik.http.services.aurelien-arino-io.loadbalancer.server.port: 80

  wireguard:
    <<: *defaults
    image: lscr.io/linuxserver/wireguard
    container_name: wireguard
    networks:
      wireguard:
        ipv4_address: 172.24.0.2
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    environment:
      <<: *environment
      SERVERURL: wireguard.${APEX}
      PEERS: kimsufi
      PEERDNS: 172.24.0.3
    volumes:
      - wireguard-data:/config
      - /lib/modules:/lib/modules
    ports:
      - 51820:51820/udp
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1
    healthcheck:
      disable: true

  pihole:
    <<: *defaults
    image: pihole/pihole:2023.02.1
    container_name: pihole
    depends_on:
      - wireguard
    networks:
      traefik:
        aliases:
          - traefik
      wireguard:
        ipv4_address: 172.24.0.3
    environment:
      <<: *environment
      DNS_MASQ_LISTENING: single
    volumes:
      - pihole-data:/etc/pihole
    labels:
      traefik.enable: true
      traefik.http.middlewares.pihole-redirect.redirectregex.regex: ^http[s]?://pihole\.${APEX}[/]?$$
      traefik.http.middlewares.pihole-redirect.redirectregex.replacement: https://pihole.${APEX}/admin
      traefik.http.middlewares.pihole-redirect.redirectregex.permanent: true
      traefik.http.routers.pihole.middlewares: pihole-redirect
      traefik.http.routers.pihole.entrypoints: websecure
      traefik.http.routers.pihole.rule: Host(`pihole.${APEX}`)
      traefik.http.routers.pihole.tls: true
      traefik.http.routers.pihole.tls.certresolver: cloudflare
      traefik.http.services.pihole.loadbalancer.server.port: 80
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 5s
      timeout: 5s
      retries: 6

  plexmediaserver:
    <<: *defaults
    image: plexinc/pms-docker
    container_name: plex
    ports:
      - 32400:32400/tcp
      - 3005:3005/tcp
      - 8324:8324/tcp
      - 32469:32469/tcp
      - 1900:1900/udp
      - 32410:32410/udp
      - 32412:32412/udp
      - 32413:32413/udp
      - 32414:42414/udp
    environment:
      <<: *environment
      ADVERTISE_IP: 'https://plex.${APEX}'
    volumes:
      - plex-database:/config
      - plex-transcode:/transcode
      - plex-media:/data
    labels:
      traefik.enable: true
      traefik.http.routers.plex.entrypoints: websecure
      traefik.http.routers.plex.rule: Host(`plex.${APEX}`)
      traefik.http.routers.plex.tls: true
      traefik.http.routers.plex.tls.certresolver: cloudflare
      traefik.http.services.plex.loadbalancer.server.port: 32400

  media-browser:
    <<: *defaults
    image: filebrowser/filebrowser
    container_name: media-browser
    volumes:
      - /var/data/docker-host/filebrowser/database.db:/database.db
      - media:/srv
    user: 1000:1001
    labels:
      traefik.enable: true
      traefik.http.routers.media-browser.entrypoints: websecure
      traefik.http.routers.media-browser.rule: Host(`browser.${APEX}`)
      traefik.http.routers.media-browser.tls: true
      traefik.http.routers.media-browser.tls.certresolver: cloudflare
      traefik.http.services.media-browser.loadbalancer.server.port: 80
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 5s
      timeout: 5s
      retries: 6

  flaresolverr:
    <<: *defaults
    image: ghcr.io/flaresolverr/flaresolverr
    container_name: flaresolverr
    networks:
      - flaresolverr
      - traefik
    environment:
      <<: *environment
      LOG_LEVEL: debug
      CAPTCHA_SOLVER: hcaptcha-solver
    labels:
      traefik.enable: true
      traefik.http.routers.flaresolverr.entrypoints: websecure
      traefik.http.routers.flaresolverr.rule: Host(`flaresolverr.${APEX}`)
      traefik.http.routers.flaresolverr.tls: true
      traefik.http.routers.flaresolverr.tls.certresolver: cloudflare
      traefik.http.services.flaresolverr.loadbalancer.server.port: 8191

  prowlarr:
    <<: *defaults
    image: lscr.io/linuxserver/prowlarr:nightly
    container_name: prowlarr
    depends_on:
      - flaresolverr
    networks:
      - flaresolverr
      - traefik
    volumes:
      - prowlarr-data:/config
    labels:
      traefik.enable: true
      traefik.http.routers.prowlarr.entrypoints: websecure
      traefik.http.routers.prowlarr.rule: Host(`prowlarr.${APEX}`)
      traefik.http.routers.prowlarr.tls: true
      traefik.http.routers.prowlarr.tls.certresolver: cloudflare
      traefik.http.routers.prowlarr.middlewares: basic-auth
      traefik.http.services.prowlarr.loadbalancer.server.port: 9696
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9696"]
      interval: 5s
      timeout: 5s
      retries: 6

  jackett:
    <<: *defaults
    image: lscr.io/linuxserver/jackett
    container_name: jackett
    depends_on:
      - flaresolverr
    networks:
      - flaresolverr
      - traefik
    environment:
      <<: *environment
      AUTO_UPDATE: 'false'
    volumes:
      - jackett-config:/config
      - jackett-blackhole:/downloads
    labels:
      traefik.enable: true
      traefik.http.routers.jackett.entrypoints: websecure
      traefik.http.routers.jackett.rule: Host(`jackett.${APEX}`)
      traefik.http.routers.jackett.tls: true
      traefik.http.routers.jackett.tls.certresolver: cloudflare
      traefik.http.services.jackett.loadbalancer.server.port: 9117
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9117/UI/Dashboard"]
      interval: 5s
      timeout: 5s
      retries: 6
  
  transmission:
    <<: *defaults
    image: lscr.io/linuxserver/transmission
    container_name: transmission
    volumes:
      - transmission-downloads:/downloads
      - transmission-config:/config
    ports:
      - 51413:51413
      - 51413:51413/udp
    labels:
      traefik.enable: true
      traefik.http.routers.transmission.entrypoints: websecure
      traefik.http.routers.transmission.rule: Host(`transmission.${APEX}`)
      traefik.http.routers.transmission.tls: true
      traefik.http.routers.transmission.tls.certresolver: cloudflare
      traefik.http.routers.transmission.middlewares: basic-auth
      traefik.http.services.transmission.loadbalancer.server.port: 9091
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091"]
      interval: 5s
      timeout: 5s
      retries: 6

  sonarr:
    <<: *defaults
    image: lscr.io/linuxserver/sonarr
    container_name: sonarr
    volumes:
      - sonarr-data:/config
      - media:/data
      - transmission-downloads:/downloads
    labels:
      traefik.enable: true
      traefik.http.routers.sonarr.entrypoints: websecure
      traefik.http.routers.sonarr.rule: Host(`sonarr.${APEX}`)
      traefik.http.routers.sonarr.tls: true
      traefik.http.routers.sonarr.tls.certresolver: cloudflare
      traefik.http.routers.sonarr.middlewares: basic-auth
      traefik.http.services.sonarr.loadbalancer.server.port: 8989
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8989"]
      interval: 5s
      timeout: 5s
      retries: 6

  radarr:
    <<: *defaults
    image: lscr.io/linuxserver/radarr
    container_name: radarr
    volumes:
      - radarr-data:/config
      - media:/data
      - transmission-downloads:/downloads
    labels:
      traefik.enable: true
      traefik.http.routers.radarr.entrypoints: websecure
      traefik.http.routers.radarr.rule: Host(`radarr.${APEX}`)
      traefik.http.routers.radarr.tls: true
      traefik.http.routers.radarr.tls.certresolver: cloudflare
      traefik.http.routers.radarr.middlewares: basic-auth
      traefik.http.services.radarr.loadbalancer.server.port: 7878
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7878"]
      interval: 5s
      timeout: 5s
      retries: 6

  shlink-db:
    <<: *defaults
    image: postgres:14
    container_name: shlink-db
    networks:
      - shlink
    environment:
      <<: *environment
      POSTGRES_DB: shlink
      POSTGRES_USER: shlink
      POSTGRES_PASSWORD: ${SHLINK_DB_PASSWD}
      PGDATA: /var/lib/postgresql/data
    volumes:
      - shlink-db:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "shlink", "-d", "shlink"]
      interval: 5s
      timeout: 5s
      retries: 6

  # d exec -t shlink shlink api-key:generate
  shlink:
    <<: *defaults
    image: shlinkio/shlink:stable
    container_name: shlink
    depends_on:
      - shlink-db
    networks:
      - traefik
      - shlink
    environment:
      <<: *environment
      DEFAULT_DOMAIN: s.${APEX}
      IS_HTTPS_ENABLED: 'true'
      DB_DRIVER: postgres
      DB_NAME: shlink
      DB_USER: shlink
      DB_PASSWORD: ${SHLINK_DB_PASSWD}
      DB_HOST: shlink-db
      DB_PORT: 5432
      DEFAULT_INVALID_SHORT_URL_REDIRECT: https://aurelien.arino.io/shlink/invalid-tag
      DEFAULT_REGULAR_404_REDIRECT: https://aurelien.arino.io/shlink/not-found
      DEFAULT_BASE_URL_REDIRECT: https://aurelien.arino.io
      GEOLITE_LICENSE_KEY: ${SHLINK_GEOLITE_KEY}
    labels:
      traefik.enable: true
      traefik.http.routers.shlink.entrypoints: websecure
      traefik.http.routers.shlink.rule: Host(`s.${APEX}`)
      traefik.http.routers.shlink.tls: true
      traefik.http.routers.shlink.tls.certresolver: cloudflare
      traefik.http.services.shlink.loadbalancer.server.port: 8080
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/rest/health"]
      interval: 5s
      timeout: 5s
      retries: 6

  shlink-client:
    <<: *defaults
    image: shlinkio/shlink-web-client
    container_name: shlink-client
    networks:
      - traefik
      - shlink
    depends_on:
      - shlink
    environment:
     <<: *environment
     SHLINK_SERVER_URL: https://s.arino.io
     SHLINK_SERVER_API_KEY: ${SHLINK_API_KEY}
    labels:
      traefik.enable: true
      traefik.http.routers.shlink-client.entrypoints: websecure
      traefik.http.routers.shlink-client.rule: Host(`client.shlink.${APEX}`)
      traefik.http.routers.shlink-client.tls: true
      traefik.http.routers.shlink-client.tls.certresolver: cloudflare
      traefik.http.routers.shlink-client.middlewares: basic-auth
      traefik.http.services.shlink-client.loadbalancer.server.port: 80
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 5s
      timeout: 5s
      retries: 6

  orealiz-wordpress:
    <<: *defaults
    image: wordpress
    container_name: orealiz-wordpress
    depends_on:
      - orealiz-db
    labels:
      traefik.enable: true
      traefik.http.routers.orealiz.entrypoints: websecure
      traefik.http.routers.orealiz.rule: Host(`orealiz.${APEX}`)
      traefik.http.routers.orealiz.tls: true
      traefik.http.routers.orealiz.tls.certresolver: cloudflare
      traefik.http.services.orealiz.loadbalancer.server.port: 80
    volumes:
      - orealiz-wordpress:/var/www/html
    environment:
      <<: *environment
      WORDPRESS_DB_HOST: orealiz-db
      WORDPRESS_DB_USER: orealiz
      WORDPRESS_DB_PASSWORD: ${OREALIZ_DB_PASSWD}
      WORDPRESS_DB_NAME: orealiz

  orealiz-db:
    <<: *defaults
    image: lscr.io/linuxserver/mariadb
    container_name: orealiz-db
    volumes:
      - orealiz-db:/config
    environment:
      <<: *environment
      MYSQL_ROOT_PASSWORD: ${OREALIZ_DB_PASSWD}
      MYSQL_DATABASE: orealiz
      MYSQL_USER: orealiz
      MYSQL_PASSWORD: ${OREALIZ_DB_PASSWD}

  searxng-redis:
    <<: *defaults
    container_name: searxng-redis
    image: redis:alpine
    command: redis-server --save "" --appendonly "no"
    networks:
      - searxng
    tmpfs:
      - /var/lib/redis
    cap_drop:
      - ALL
    cap_add:
      - SETGID
      - SETUID
      - DAC_OVERRIDE

  searxng:
    <<: *defaults
    container_name: searxng
    image: searxng/searxng
    networks:
      - searxng
      - traefik
    volumes:
      - ./searxng:/etc/searxng:rw
    environment:
      <<: *environment
      SEARXNG_BASE_URL: https://search.${APEX}/
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
      - DAC_OVERRIDE
    logging:
      driver: "json-file"
      options:
        max-size: "1m"
        max-file: "1"
    labels:
      traefik.enable: true
      traefik.http.routers.searxng.entrypoints: websecure
      traefik.http.routers.searxng.rule: Host(`search.${APEX}`)
      traefik.http.routers.searxng.tls: true
      traefik.http.routers.searxng.tls.certresolver: cloudflare
      traefik.http.services.searxng.loadbalancer.server.port: 8080

  excalidraw:
    <<: *defaults
    image: excalidraw/excalidraw
    container_name: excalidraw
    networks:
      - traefik
    labels:
      traefik.enable: true
      traefik.http.routers.excalidraw.entrypoints: websecure
      traefik.http.routers.excalidraw.rule: Host(`draw.${APEX}`)
      traefik.http.routers.excalidraw.tls: true
      traefik.http.routers.excalidraw.tls.certresolver: cloudflare
      traefik.http.services.excalidraw.loadbalancer.server.port: 80

  protonmail-bridge:
    <<: *defaults
    build: protonmail-bridge-docker/build
    container_name: protonmail-bridge
    volumes:
      - /var/data/docker-host/traefik/dump/smtp.arino.io/privatekey.pem:/root/key.pem:ro
      - /var/data/docker-host/traefik/dump/smtp.arino.io/certificate.pem:/root/cert.pem:ro
      - protonmail:/root
    networks:
      - traefik
      - proton
    ports:
      - 1025:25/tcp
    labels:
      traefik.enable: true
      traefik.tcp.routers.proton-smtp.entrypoints: proton
      traefik.tcp.routers.proton-smtp.rule: HostSNI(`smtp.${APEX}`)
      traefik.tcp.routers.proton-smtp.service: proton-smtp
      traefik.tcp.routers.proton-smtp.tls: true
      traefik.tcp.routers.proton-smtp.tls.passthrough: true
      traefik.tcp.routers.proton-smtp.tls.certresolver: cloudflare
      traefik.tcp.services.proton-smtp.loadbalancer.server.port: 25

  vaulwarden:
    <<: *defaults
    image: vaultwarden/server
    container_name: vaultwarden
    depends_on:
      - protonmail-bridge
    networks:
      - proton
      - traefik
    volumes:
      - vw-data:/data
    environment:
      <<: *environment
      SIGNUPS_ALLOWED: "false"
      SIGNUPS_VERIFY: "true"
      ADMIN_TOKEN: ${VW_ADMIN_TOKEN}
      WEBSOCKET_ENABLED: "true"
      SMTP_HOST: smtp.arino.io
      SMTP_FROM: dev@arino.io
      SMTP_PORT: 1025
      SMTP_SECURITY: "starttls"
      SMTP_USERNAME: dev@arino.io
      SMTP_PASSWORD: ${SMTP_PASSWD}
      DOMAIN: https://vault.${APEX}
    labels:
      traefik.enable: true
      traefik.http.routers.vaultwarden-ui.entrypoints: websecure
      traefik.http.routers.vaultwarden-ui.rule: Host(`vault.${APEX}`)
      traefik.http.routers.vaultwarden-ui.tls: true
      traefik.http.routers.vaultwarden-ui.tls.certresolver: cloudflare
      traefik.http.services.vaultwarden-ui.loadbalancer.server.port: 80
      traefik.http.routers.vaultwarden-ui.service: vaultwarden-ui
      traefik.http.routers.vaultwarden-ws.entrypoints: websecure
      traefik.http.routers.vaultwarden-ws.rule: Host(`vault.${APEX}`) && Path(`/notifications/hub`)
      traefik.http.routers.vaultwarden-ws.tls: true
      traefik.http.routers.vaultwarden-ws.tls.certresolver: cloudflare
      traefik.http.routers.vaultwarden-ws.service: vaultwarden-ws
      traefik.http.services.vaultwarden-ws.loadbalancer.server.port: 3012

#  valheim:
#    <<: *defaults
#    image: lloesche/valheim-server
#    restart: unless-stopped
#    container_name: valheim
#    stop_grace_period: 2m
#    networks:
#      - traefik
#    cap_add:
#      - sys_nice
#    volumes:
#      - valheim-config:/config
#      - valheim-data:/opt/valheim
#    ports:
#      - 9001:9001
#      - 2456:2456/udp
#    environment:
#      <<: *environment
#      SERVER_NAME: Arinono
#      WORLD_NAME: Lachillance
#      SERVER_PASS: ${VALHEIM_PASSWD}
#      SERVER_PUBLIC: "false"
#      DISCORD_WEBHOOK: ${DISCORD_VALHEIM_WH}
#      DISCORD_RESTART: "Restarting Valheim server in 1 minute!"
#      PRE_RESTART_HOOK: 'curl -sfSL -X POST -H "Content-Type: application/json" -d "{\"username\":\"Valheim\",\"content\":\"$$DISCORD_RESTART\"}" "$$DISCORD_WEBHOOK" && sleep 60'
#      DISCORD_START: "Starting Valheim server $$SERVER_NAME"
#      PRE_BOOTSTRAP_HOOK: 'curl -sfSL -X POST -H "Content-Type: application/json" -d "{\"username\":\"Valheim\",\"content\":\"$$(eval echo $$DISCORD_START)\"}" "$$DISCORD_WEBHOOK"'
#      DISCORD_STARTED: "Server started $$SERVER_NAME"
#      POST_START_HOOK: 'curl -sfSL -X POST -H "Content-Type: application/json" -d "{\"username\":\"Valheim\",\"content\":\"$$(eval echo $$DISCORD_STARTED)\"}" "$$DISCORD_WEBHOOK"'
#      DISCORD_RESTARTED: "Server restarted"
#      POST_RESTART_HOOK: 'curl -sfSL -X POST -H "Content-Type: application/json" -d "{\"username\":\"Valheim\",\"content\":\"$$DISCORD_RESTARTED\"}" "$$DISCORD_WEBHOOK"'
#      DISCORD_STOPPING: "Stopping Valheim server (now, cheh...)"
#      PRE_SERVER_SHUTDOWN_HOOK: 'curl -sfSL -X POST -H "Content-Type: application/json" -d "{\"username\":\"Valheim\",\"content\":\"$$DISCORD_STOPPING\"}" "$$DISCORD_WEBHOOK"'
#      DISCORD_STOPPED: "Server stopped"
#      POST_SERVER_RUN_HOOK: 'curl -sfSL -X POST -H "Content-Type: application/json" -d "{\"username\":\"Valheim\",\"content\":\"$$DISCORD_RESTART\"}" "$$DISCORD_WEBHOOK"'
#      SUPERVISOR_HTTP: "true"
#      SUPERVISOR_HTTP_USER: arinono
#      SUPERVISOR_HTTP_PASS: ${PASSWD}
#    labels:
#      traefik.enable: true
#      traefik.http.routers.valheim-supervisor.entrypoints: websecure
#      traefik.http.routers.valheim-supervisor.rule: Host(`valheim-supervisor.${APEX}`)
#      traefik.http.routers.valheim-supervisor.tls: true
#      traefik.http.routers.valheim-supervisor.tls.certresolver: cloudflare
#      traefik.http.services.valheim-supervisor.loadbalancer.server.port: 9001
#      traefik.http.routers.valheim-supervisor.service: valheim-supervisor
#      traefik.udp.routers.valheim-udp.entrypoints: websecure
#      traefik.udp.routers.valheim-udp.tls: true
#      traefik.udp.routers.valheim-udp.tls.certresolver: cloudflare
#      traefik.udp.routers.valheim-udp.service: valheim-udp
#      traefik.udp.services.valheim-udp.loadbalancer.server.port: 2456
#
#  valheim2:
#    <<: *defaults
#    image: lloesche/valheim-server
#    restart: unless-stopped
#    container_name: valheim2
#    stop_grace_period: 2m
#    networks:
#      - traefik
#    cap_add:
#      - sys_nice
#    volumes:
#      - valheim2-config:/config
#      - valheim2-data:/opt/valheim
#    ports:
#      - 2457:2456/udp
#    environment:
#      <<: *environment
#      SERVER_NAME: Arinono
#      WORLD_NAME: Phoenix
#      SERVER_PASS: ${VALHEIM2_PASSWD}
#      SERVER_PUBLIC: "false"
#    labels:
#      traefik.enable: true
#      traefik.udp.routers.phoenix-udp.entrypoints: websecure
#      traefik.udp.routers.phoenix-udp.tls: true
#      traefik.udp.routers.phoenix-udp.tls.certresolver: cloudflare
#      traefik.udp.routers.phoenix-udp.service: phoenix-udp
#      traefik.udp.services.phoenix-udp.loadbalancer.server.port: 2456

  ntfy:
    <<: *defaults
    image: binwiederhier/ntfy
    container_name: ntfy
    command:
      - serve
    networks:
      - traefik
    volumes:
      - ntfy:/etc/ntfy
      - ntfy_cache:/var/cache/ntfy 
    labels: 
      traefik.enable: true
      traefik.http.routers.ntfy.entrypoints: websecure
      traefik.http.routers.ntfy.rule: Host(`ntfy.${APEX}`)
      traefik.http.routers.ntfy.tls: true
      traefik.http.routers.ntfy.tls.certresolver: cloudflare
      traefik.http.services.ntfy.loadbalancer.server.port: 80
        # traefik.http.routers.ntfy.middlewares: basic-auth
    healthcheck:
      test: ["CMD-SHELL", "wget -q --tries=1 http://localhost:80/v1/health -O - | grep -Eo '\"healthy\"\\s*:\\s*true' || exit 1"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 40s

  w2k-db:
    <<: *defaults
    image: postgres:14
    container_name: wuxia2kindle-db
    networks:
      - w2k
    environment:
      <<: *environment
      POSTGRES_DB: wuxia2kindle
      POSTGRES_USER: wuxia2kindle
      POSTGRES_PASSWORD: ${W2K_DB_PASSWD}
      PGDATA: /var/lib/postgresql/data
    volumes:
      - w2k-db:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "wuxia2kindle", "-d", "wuxia2kindle"]
      interval: 5s
      timeout: 5s
      retries: 6

  w2k-app:
    <<: *defaults
    build:  wuxia2kindle
    container_name: wuxia2kindle
    depends_on:
      - w2k-db
      - protonmail-bridge
    networks:
      - traefik
      - w2k
      - proton
    environment:
      <<: *environment
      DATABASE_URL: ${W2K_DB_URL}
      SMTP_SERVER: smtp.arino.io
      SMTP_PORT: 1025
      SMTP_USER: kindle@arino.io
      SMTP_PASSWORD: ${SMTP_PASSWD}
      SEND_TO: arinono@kindle.com
      API_URL: https://api.wuxia2kindle.${APEX}
      API_TOKEN: ${BASIC_HEADER}
    labels:
      traefik.enable: true
      traefik.http.routers.w2kapp.entrypoints: websecure
      traefik.http.routers.w2kapp.rule: Host(`api.wuxia2kindle.${APEX}`)
      traefik.http.routers.w2kapp.tls: true
      traefik.http.routers.w2kapp.tls.certresolver: cloudflare
      traefik.http.services.w2kapp.loadbalancer.server.port: 3000
      traefik.http.routers.w2kapp.service: w2kapp
      traefik.http.routers.w2kapp.middlewares: basic-auth
      traefik.http.routers.w2kclient.entrypoints: websecure
      traefik.http.routers.w2kclient.rule: Host(`client.wuxia2kindle.${APEX}`)
      traefik.http.routers.w2kclient.tls: true
      traefik.http.routers.w2kclient.tls.certresolver: cloudflare
      traefik.http.services.w2kclient.loadbalancer.server.port: 8000
      traefik.http.routers.w2kclient.middlewares: basic-auth
      traefik.http.routers.w2kclient.service: w2kclient

  n2agestion:
    <<: *defaults
    image: nginx
    container_name: n2agestion
    volumes:
      - ./n2agestion:/usr/share/nginx/html
    labels:
      traefik.enable: true
      traefik.http.routers.n2agestion.entrypoints: websecure
      traefik.http.routers.n2agestion.rule: Host(`n2agestion.${APEX}`)
      traefik.http.routers.n2agestion.tls: true
      traefik.http.routers.n2agestion.tls.certresolver: cloudflare
      traefik.http.services.n2agestion.loadbalancer.server.port: 80
      traefik.http.routers.n2agestion.service: n2agestion

networks:
  traefik:
    external: false
  shlink:
    external: false
  flaresolverr:
    external: false
  proton:
    external: false
  w2k:
    external: false
  searxng:
    ipam:
      driver: default
  wireguard:
    external: false
    name: wireguard
    ipam:
      driver: default
      config:
        - subnet: 172.24.0.0/16

volumes:
  traefik-certs:
    driver: local
    driver_opts: &volume_conf
      type: none
      o: bind
      device: /var/data/docker-host/traefik/certs
  traefik-logs:
    driver: local
    driver_opts:
      <<: *volume_conf
      device: /var/data/docker-host/traefik/logs
  traefik-dump:
    driver: local
    driver_opts: 
      <<: *volume_conf
      device: /var/data/docker-host/traefik/dump
  portainer-data:
    driver: local
    driver_opts: 
      <<: *volume_conf
      device: /var/data/docker-host/portainer
  media:
    driver: local
    driver_opts:
      <<: *volume_conf
      device: /var/data/docker-host/media
  plex-database:
    driver: local
    driver_opts:
      <<: *volume_conf
      device: /var/data/docker-host/plex/database
  plex-transcode:
    driver: local
    driver_opts:
      <<: *volume_conf
      device: /var/data/docker-host/plex/transcode
  plex-media:
    driver: local
    driver_opts:
      <<: *volume_conf
      device: /var/data/docker-host/media/plex
  transmission-downloads:
    driver: local
    driver_opts:
      <<: *volume_conf
      device: /var/data/docker-host/media/transmission
  jackett-config:
    driver: local
    driver_opts:
      <<: *volume_conf
      device: /var/data/docker-host/jackett/config
  jackett-blackhole:
    driver: local
    driver_opts:
      <<: *volume_conf
      device: /var/data/docker-host/jackett/blackhole
  transmission-config:
    driver: local
    driver_opts:
      <<: *volume_conf
      device: /var/data/docker-host/transmission
  wireguard-data:
    driver: local
    driver_opts:
      <<: *volume_conf
      device: /var/data/docker-host/wireguard/config
  pihole-data:
    driver: local
    driver_opts:
      <<: *volume_conf
      device: /var/data/docker-host/pihole
  shlink-db:
    driver: local
    driver_opts:
      <<: *volume_conf
      device: /var/data/docker-host/shlink/database
  sonarr-data:
    driver: local
    driver_opts:
      <<: *volume_conf
      device: /var/data/docker-host/arr/sonarr
  radarr-data:
    driver: local
    driver_opts:
      <<: *volume_conf
      device: /var/data/docker-host/arr/radarr
  prowlarr-data:
    driver: local
    driver_opts:
      <<: *volume_conf
      device: /var/data/docker-host/arr/prowlarr
  orealiz-wordpress:
    driver: local
    driver_opts:
      <<: *volume_conf
      device: /var/data/docker-host/orealiz/wordpress
  orealiz-db:
    driver: local
    driver_opts:
      <<: *volume_conf
      device: /var/data/docker-host/orealiz/database
  mastodon-conf:
    driver: local
    driver_opts:
      <<: *volume_conf
      device: /var/data/docker-host/mastodon/config
  mastodon-redis:
    driver: local
    driver_opts:
      <<: *volume_conf
      device: /var/data/docker-host/mastodon/redis
  mastodon-pg:
    driver: local
    driver_opts:
      <<: *volume_conf
      device: /var/data/docker-host/mastodon/postgres
  protonmail:
    driver: local
    driver_opts:
      <<: *volume_conf
      device: /var/data/docker-host/protonmail
  vw-data:
    driver: local
    driver_opts:
      <<: *volume_conf
      device: /var/data/docker-host/vaultwarden
  valheim-data:
    driver: local
    driver_opts:
      <<: *volume_conf
      device: /var/data/docker-host/valheim/data
  valheim-config:
    driver: local
    driver_opts:
      <<: *volume_conf
      device: /var/data/docker-host/valheim/config
  valheim2-data:
    driver: local
    driver_opts:
      <<: *volume_conf
      device: /var/data/docker-host/valheim2/data
  valheim2-config:
    driver: local
    driver_opts:
      <<: *volume_conf
      device: /var/data/docker-host/valheim2/config
  ntfy:
    driver: local
    driver_opts:
      <<: *volume_conf
      device: /var/data/docker-host/ntfy/etc
  ntfy_cache:
    driver: local
    driver_opts:
      <<: *volume_conf
      device: /var/data/docker-host/ntfy/cache
  w2k-db:
    driver: local
    driver_opts:
      <<: *volume_conf
      device: /var/data/docker-host/wuxia2kindle/postgres
...
